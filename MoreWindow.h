#pragma once

#include "ui_MoreWindow.h"

#include <QDialog>
#include <QFormLayout>
#include <qtablewidget.h>
#include <qpushbutton.h>
#include <QHeaderView>
#include <qmessagebox.h>
#include <QTextEdit>
#include <QString>
#include <QFileDialog>
#include <fstream>

#include "TestWindow.h"

#define START_MOREWINDOW_WIDTH				900
#define START_MOREWINDOW_HEIGHT				250

#define PADDING_MAINWIDGET					10

#define BASE_COLUMN_COUNT					6
#define BASE_ROW_COUNT						2

#define MEASURED_OFFSET_DOUBLE				2
#define MEASURED_OFFSET_TRIPPLE				3
#define MEASURED_OFFSET_SEXTUPLE			6

#define ROW_OFFSET_DOUBLE					2
#define ROW_OFFSET_TRIPPLE					3

#define SPAN_NONE							1, 1

#define SPAN_VERTICAL_DOUBLE				2, 1
#define SPAN_VERTICAL_TRIPPLE				3, 1
#define SPAN_VERTICAL_QUADRUPLE				4, 1

#define SPAN_HORIZONTAL_DOUBLE				1, 2
#define SPAN_HORIZONTAL_TRIPPLE				1, 3
#define SPAN_HORIZONTAL_QUADRUPLE			1, 4
#define SPAN_HORIZONTAL_SEXTUPLE			1, 6

#define SPAN_SQUAD_DOUBLE					2, 2

#define IND_ROW_BASE_SIGN					0
#define IND_ROW_BASE_VALUE					1
#define IND_ROW_FILLED_SIGN					IND_ROW_BASE_SIGN
#define IND_ROW_FILLED_VALUE				2
#define IND_ROW_FILLED_OUT_VALUE			4
#define IND_ROW_FILLED_IN_VALUE				IND_ROW_FILLED_VALUE
#define IND_ROW_FILLED_IN_ANALOG_VALUE		3

#define IND_ROW_BASE_SIGN_CONNECTOR			IND_ROW_BASE_SIGN
#define IND_ROW_BASE_SIGN_PIN				IND_ROW_BASE_SIGN
#define IND_ROW_BASE_SIGN_DIRECTION			IND_ROW_BASE_SIGN
#define IND_ROW_BASE_SIGN_TYPE				IND_ROW_BASE_SIGN
#define IND_ROW_BASE_SIGN_NAME				IND_ROW_BASE_SIGN
#define IND_ROW_BASE_SIGN_COMMENT			IND_ROW_BASE_SIGN

#define IND_ROW_BASE_VALUE_CONNECTOR		IND_ROW_BASE_VALUE
#define IND_ROW_BASE_VALUE_PIN				IND_ROW_BASE_VALUE
#define IND_ROW_BASE_VALUE_DIRECTION		IND_ROW_BASE_VALUE
#define IND_ROW_BASE_VALUE_TYPE				IND_ROW_BASE_VALUE
#define IND_ROW_BASE_VALUE_NAME				IND_ROW_BASE_VALUE
#define IND_ROW_BASE_VALUE_COMMENT			IND_ROW_BASE_VALUE

#define IND_ROW_FILLED_SIGN_COMMENT			IND_ROW_FILLED_SIGN

#define OFFSET_NULL							0

#define IND_COLUMN_BASE_CONNECTOR			0
#define IND_COLUMN_BASE_PIN					1
#define IND_COLUMN_BASE_DIRECTION			2
#define IND_COLUMN_BASE_TYPE				3
#define IND_COLUMN_BASE_NAME				4

#define IND_COLUMN_FILLED_COMMENT(offset)	IND_COLUMN_BASE_COMMENT + offset

#define CELL_SIGN_BASE_CONNECTOR			IND_ROW_BASE_SIGN_CONNECTOR,	IND_COLUMN_BASE_CONNECTOR
#define CELL_SIGN_BASE_PIN					IND_ROW_BASE_SIGN_PIN,			IND_COLUMN_BASE_PIN
#define CELL_SIGN_BASE_DIRECTION			IND_ROW_BASE_SIGN_DIRECTION,	IND_COLUMN_BASE_DIRECTION
#define CELL_SIGN_BASE_TYPE					IND_ROW_BASE_SIGN_TYPE,			IND_COLUMN_BASE_TYPE
#define CELL_SIGN_BASE_NAME					IND_ROW_BASE_SIGN_NAME,			IND_COLUMN_BASE_NAME
#define CELL_SIGN_BASE_COMMENT				IND_ROW_BASE_SIGN_COMMENT,		IND_COLUMN_BASE_COMMENT

#define CELL_SIGN_FILLED_COMMENT(offset)	IND_ROW_FILLED_SIGN_COMMENT,	IND_COLUMN_FILLED_COMMENT(offset)

#define CELL_VALUE_BASE_CONNECTOR			IND_ROW_BASE_VALUE_CONNECTOR,	IND_COLUMN_BASE_CONNECTOR
#define CELL_VALUE_BASE_PIN					IND_ROW_BASE_VALUE_PIN,			IND_COLUMN_BASE_PIN
#define CELL_VALUE_BASE_DIRECTION			IND_ROW_BASE_VALUE_DIRECTION,	IND_COLUMN_BASE_DIRECTION
#define CELL_VALUE_BASE_TYPE				IND_ROW_BASE_VALUE_TYPE,		IND_COLUMN_BASE_TYPE
#define CELL_VALUE_BASE_NAME				IND_ROW_BASE_VALUE_NAME,		IND_COLUMN_BASE_NAME
#define CELL_VALUE_BASE_COMMENT				IND_ROW_BASE_VALUE_COMMENT,		IND_COLUMN_BASE_COMMENT

#define IND_OUT_ROW_SIGN_MEASURED				0
#define IND_OUT_ROW_SIGN_MEASURED_VALUES		1
#define IND_OUT_ROW_SIGN_MEASURED_CURRENT		3
#define IND_OUT_ROW_SIGN_MEASURED_VOLTAGE		3
#define IND_OUT_ROW_SIGN_THRESHOLDS				1
#define IND_OUT_ROW_SIGN_CURRENT				2
#define IND_OUT_ROW_SIGN_VOLTAGE				2
#define IND_OUT_ROW_SIGN_MIN_CURRENT			3
#define IND_OUT_ROW_SIGN_MAX_CURRENT			3
#define IND_OUT_ROW_SIGN_MIN_VOLTAGE			3
#define IND_OUT_ROW_SIGN_MAX_VOLTAGE			3

#define IND_OUT_COLUMN_SIGN_MEASURED			5
#define IND_OUT_COLUMN_SIGN_MEASURED_VALUES		5
#define IND_OUT_COLUMN_SIGN_MEASURED_CURRENT	5
#define IND_OUT_COLUMN_SIGN_MEASURED_VOLTAGE	6
#define IND_OUT_COLUMN_SIGN_THRESHOLDS			7
#define IND_OUT_COLUMN_SIGN_CURRENT				7
#define IND_OUT_COLUMN_SIGN_VOLTAGE				9
#define IND_OUT_COLUMN_SIGN_MIN_CURRENT			7
#define IND_OUT_COLUMN_SIGN_MAX_CURRENT			8
#define IND_OUT_COLUMN_SIGN_MIN_VOLTAGE			9
#define IND_OUT_COLUMN_SIGN_MAX_VOLTAGE			10

#define CELL_OUT_SIGN_MEASURED					IND_OUT_ROW_SIGN_MEASURED,			IND_OUT_COLUMN_SIGN_MEASURED
#define CELL_OUT_SIGN_MEASURED_VALUES			IND_OUT_ROW_SIGN_MEASURED_VALUES,	IND_OUT_COLUMN_SIGN_MEASURED_VALUES
#define CELL_OUT_SIGN_MEASURED_CURRENT			IND_OUT_ROW_SIGN_MEASURED_CURRENT,	IND_OUT_COLUMN_SIGN_MEASURED_CURRENT
#define CELL_OUT_SIGN_MEASURED_VOLTAGE			IND_OUT_ROW_SIGN_MEASURED_VOLTAGE,	IND_OUT_COLUMN_SIGN_MEASURED_VOLTAGE
#define CELL_OUT_SIGN_THRESHOLDS				IND_OUT_ROW_SIGN_THRESHOLDS,		IND_OUT_COLUMN_SIGN_THRESHOLDS
#define CELL_OUT_SIGN_THRESHOLDS_CURRENT		IND_OUT_ROW_SIGN_CURRENT,			IND_OUT_COLUMN_SIGN_CURRENT
#define CELL_OUT_SIGN_THRESHOLDS_VOLTAGE		IND_OUT_ROW_SIGN_VOLTAGE,			IND_OUT_COLUMN_SIGN_VOLTAGE
#define CELL_OUT_SIGN_MIN_CURRENT				IND_OUT_ROW_SIGN_MIN_CURRENT,		IND_OUT_COLUMN_SIGN_MIN_CURRENT
#define CELL_OUT_SIGN_MAX_CURRENT				IND_OUT_ROW_SIGN_MAX_CURRENT,		IND_OUT_COLUMN_SIGN_MAX_CURRENT
#define CELL_OUT_SING_MIN_VOLTAGE				IND_OUT_ROW_SIGN_MIN_VOLTAGE,		IND_OUT_COLUMN_SIGN_MIN_VOLTAGE
#define CELL_OUT_SING_MAX_VOLTAGE				IND_OUT_ROW_SIGN_MAX_VOLTAGE,		IND_OUT_COLUMN_SIGN_MAX_VOLTAGE

#define IND_OUT_ROW_VALUES						4

#define CELL_OUT_VALUES_MEASURED_CURRENT		IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MEASURED_CURRENT
#define CELL_OUT_VALUES_MEASURED_VOLTAGE		IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MEASURED_VOLTAGE
#define CELL_OUT_VALUES_MIN_CURRENT				IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MIN_CURRENT
#define CELL_OUT_VALUES_MAX_CURRENT				IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MAX_CURRENT
#define CELL_OUT_VALUES_MIN_VOLTAGE				IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MIN_VOLTAGE
#define CELL_OUT_VALUES_MAX_VOLTAGE				IND_OUT_ROW_VALUES,	IND_OUT_COLUMN_SIGN_MAX_VOLTAGE

#define	IND_IN_ROW_SIGN_MEASURED					0

#define IND_IN_COLUMN_SIGN_MEASURED_1				5
#define IND_IN_COLUMN_SIGN_MEASURED_2				6

#define CELL_IN_SIGN_MEASURED_1						IND_IN_ROW_SIGN_MEASURED,	IND_IN_COLUMN_SIGN_MEASURED_1
#define CELL_IN_SIGN_MEASURED_2						IND_IN_ROW_SIGN_MEASURED,	IND_IN_COLUMN_SIGN_MEASURED_2

#define IND_IN_ROW_VALUE_MEASURED					1

#define IND_IN_COLUMN_VALUE_MEASURED_1				5
#define IND_IN_COLUMN_VALUE_MEASURED_2				6

#define CELL_IN_VALUE_MEASURED_1					IND_IN_ROW_VALUE_MEASURED,	IND_IN_COLUMN_VALUE_MEASURED_1
#define CELL_IN_VALUE_MEASURED_2					IND_IN_ROW_VALUE_MEASURED,	IND_IN_COLUMN_VALUE_MEASURED_2

#define IND_IN_ANALOG_ROW_SIGN_MEASURED				IND_ROW_BASE_SIGN
#define IND_IN_ANALOG_ROW_SIGN_MEASURED_VALUES		1
#define IND_IN_ANALOG_ROW_SIGN_THRESHOLDS			1
#define IND_IN_ANALOG_ROW_SIGN_THRESHOLDS_MIN		2
#define	IND_IN_ANALOG_ROW_SIGN_THRESHOLDS_MAX		2

#define IND_IN_ANALOG_COLUMN_SIGN_MEASURED			5
#define IND_IN_ANALOG_COLUMN_SIGN_MEASURED_VALUES	5
#define IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS		6
#define	IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MIN	6
#define IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MAX	7

#define CELL_SIGN_IN_ANALOG_MEASURED				IND_IN_ANALOG_ROW_SIGN_MEASURED,		IND_IN_ANALOG_COLUMN_SIGN_MEASURED
#define CELL_SIGN_IN_ANALOG_MEASURED_VALUES			IND_IN_ANALOG_ROW_SIGN_MEASURED_VALUES,	IND_IN_ANALOG_COLUMN_SIGN_MEASURED_VALUES
#define CELL_SIGN_IN_ANALOG_THRESHOLDS				IND_IN_ANALOG_ROW_SIGN_THRESHOLDS,		IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS
#define CELL_SIGN_IN_ANALOG_THRESHOLDS_MIN			IND_IN_ANALOG_ROW_SIGN_THRESHOLDS_MIN,	IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MIN
#define	CELL_SIGN_IN_ANALOG_THRESHOLDS_MAX			IND_IN_ANALOG_ROW_SIGN_THRESHOLDS_MAX,	IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MAX

#define CELL_VALUE_IN_ANALOG_MEASURED_VALUES		IND_ROW_FILLED_IN_ANALOG_VALUE,			IND_IN_ANALOG_COLUMN_SIGN_MEASURED_VALUES
#define CELL_VALUE_IN_ANALOG_THRESHOLDS_MIN			IND_ROW_FILLED_IN_ANALOG_VALUE,			IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MIN
#define	CELL_VALUE_IN_ANALOG_THRESHOLDS_MAX			IND_ROW_FILLED_IN_ANALOG_VALUE,			IND_IN_ANALOG_COLUMN_SIGN_THRESHOLDS_MAX

#define FILE_MEASUREMENT_OFFSET		8

#define WINDOW_OUT_HEIGHT			300
#define WINDOW_IN_HEIGHT			175
#define EMPTY_WINDOW_WIDTH			600
#define WINDOW_MEASURED_WIDTH		300

class TestTableRowProperties;
class TestWindow;

class MoreWindow : public QDialog
{
	Q_OBJECT

public:
	MoreWindow(TestTableRowProperties* row);
	~MoreWindow();

	virtual void setValues();

protected:
	QTableWidget* mainTableWidget;
	QTextEdit* commentTextEdit;
	QPushButton* saveChangesButton;
	QFont* font;

	TestTableRowProperties* row;
	int coutThresholds;
	bool isAllInit;

	void prepareItem(int row, int column, int rowSpan, int columnSpan);
	void resetLanguage(int offset);

private:
	void initBaseUi();
	void fillBaseTable();

	void resizeEvent(QResizeEvent* event) { mainWidget->resize(geometry().width() - (PADDING_MAINWIDGET * 2), geometry().height() - PADDING_MAINWIDGET); };

	void resaveFile();

	QWidget* mainWidget;
	QVBoxLayout* mainVLayout;
	QHBoxLayout* bottomHLayout;
	QSpacerItem* bottomSpacer;
	QPushButton* startTestButton;

public slots:
	void on_mainTableWidget_cellChanged(int row, int column);
	void on_commentTextEdit_textChanged();
	void on_startTestButton_clicked();
};

class MoreWindowOut : public MoreWindow
{
public:
	MoreWindowOut(TestTableRowProperties* row);

private:
	TestTableRowProperties* row;

	void generateSigns();
	void resetBlockLanguage(int measuredNum);
	void setValues();
};

class MoreWindowIn : public MoreWindow
{
public:
	MoreWindowIn(TestTableRowProperties* row);

private:
	TestTableRowProperties* row;

	void generateSigns();
	void resetBlockLanguage(int measuredNum);
	void setValues();
};

class MoreWindowInAnalog : public MoreWindow
{
public:
	MoreWindowInAnalog(TestTableRowProperties* row);

private:
	TestTableRowProperties* row;

	void generateSigns();
	void resetBlockLanguage(int measuredNum);
	void setValues();
};